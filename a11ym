#!/usr/bin/env node

var Crawler = require('simplecrawler');
var URL     = require('url');
var async   = require('async');
var pa11y   = require('pa11y');
var process = require('process');
var program = require('commander');

program
    .usage('[options] <url>')
    .option(
        '-c, --filter-by-codes <codes>',
        'Filter results by comma-separated WCAG codes (e.g. `H25,H91,G18`).'
    )
    .option(
        '-C, --exclude-by-codes <codes>',
        'Exclude results by comma-separated WCAG codes (e.g. `H25,H91,G18`).'
    )
    .option(
        '-l, --level <level>',
        'Level of message to fail on (exit code 2): `error` (default), `warning`, `notice`.',
        'error'
    )
    .option(
        '-d, --maximum-depth <depth>',
        'Explore up to a maximum depth (hops).',
        3
    )
    .option(
        '-m, --maximum-urls <maximum_urls>',
        'Maximum number of URLs to compute.',
        128
    )
    .option(
        '-o, --output <output_directory>',
        'Output directory.',
        __dirname + '/a11ym_output'
    )
    .option(
        '-r, --report <report>',
        'Report format: `cli`, `csv`, `html` (default), `json` or `markdown`.',
        'html'
    )
    .option(
        '-s, --standard <standard>',
        'Standard to use: `Section508`, `WCAG2A`, `WCAG2AA` (default) or ` WCAG2AAA`.',
        'WCAG2AA'
    )
    .option(
        '-S, --sniffers <sniffers>',
        'Path to the sniffers file, e.g. `resource/sniffers.js` (default).',
        __dirname + '/resource/sniffers.js'
    )
    .option(
        '-u, --filter-by-urls <urls>',
        'Filter URL to test by using a regular expression without delimiters (e.g. \'news|contact\').'
    )
    .option(
        '-U, --exclude-by-urls <urls>',
        'Exclude URL to test by using a regular expression without delimiters (e.g. \'news|contact\').'
    )
    .parse(process.argv);

program.url = program.args[0];

if (!program.url) {
    program.help();
    process.exit(1);
}

var runTest = new function () {
    var reporter = null;

    if (-1 !== ['cli', 'csv', 'json'].indexOf(program.report)) {
        reporter = require('./node_modules/pa11y/reporter/' + program.report);
    } else {
        reporter = require('./reporter/html');
        reporter.config({
            outputDirectory: program.output
        });
    }

    options = {
        log      : reporter,
        standard : program.standard,
        standards: [program.standard],
        htmlcs   : program.sniffers
    };

    var filterByCodes  = null;
    var excludeByCodes = null;

    if (undefined !== program.filterByCodes) {
        filterByCodes = new RegExp('\\b(' + program.filterByCodes.replace(/[\s,]/g, '|') + ')\\b', 'i');
    }

    if (undefined !== program.excludeByCodes) {
        excludeByCodes = new RegExp('\\b(' + program.excludeByCodes.replace(/[\s,]/g, '|') + ')\\b', 'i');
    }

    var test = pa11y(options);

    return function (url, callbacks) {
        try {
            test.run(
                url,
                function (error, results) {
                    if (error) {
                        options.log.error(error.stack);

                        return callbacks.error(error);
                    }

                    if (null !== filterByCodes) {
                        results = results.filter(
                            function (result) {
                                return filterByCodes.test(result.code);
                            }
                        );
                    }

                    if (null !== excludeByCodes) {
                        results = results.filter(
                            function (result) {
                                return !excludeByCodes.test(result.code);
                            }
                        );
                    }

                    options.log.results(results, url);

                    if (true === reportShouldFail(program.level, results)) {
                        return callbacks.error(error);
                    }

                    callbacks.complete(results);
                }
            );
        } catch (error) {
            options.log.error(error.stack);
            process.exit(1);
        }
    };
};

var reportShouldFail = function (level, results) {
    if (level === 'notice') {
        return results.length > 0;
    }

    if (level === 'warning') {
        return results.filter(isErrorOrWarning).length > 0;
    }

    return results.filter(isError).length > 0;
};

var isError = function (result) {
    return 'error' === result.type;
};

var isErrorOrWarning = function (result) {
    return 'error' === result.type || 'warning' === result.type;
};

var hasErrors = false;

var url  = URL.parse(program.url);
var urls = async.queue(
    function (task, onTaskComplete) {
        console.log('Run: ' + task.url + '.');
        runTest(
            task.url,
            {
                complete: function(results) {
                    onTaskComplete(null, results);
                },
                error: function(error) {
                    hasErrors = true;
                    onTaskComplete(error);
                }
            }
        );
    }
);
urls.drain = function () {
    if (true === hasErrors) {
        process.exit(2);
    }
};

var crawler             = new Crawler(url.hostname);
crawler.initialPath     = url.path;
crawler.initialPort     = url.port || 80;
crawler.initialProtocol = (url.protocol || 'http').replace(':', '');
crawler.interval        = 100;
crawler.maxConcurrency  = 5;
crawler.maxDepth        = +program.maximumDepth;

var maximumUrls   = program.maximumUrls;
var filterByUrls  = null;
var excludeByUrls = null;

if (undefined !== program.filterByUrls) {
    filterByUrls = new RegExp(program.filterByUrls, 'i');
}

if (undefined !== program.excludeByUrls) {
    excludeByUrls = new RegExp(program.excludeByUrls, 'i');
}

crawler.on('fetchcomplete', function(queueItem) {
    console.log('Found: ' + queueItem.url + '.');

    if (!queueItem.stateData.contentType ||
        null === queueItem.stateData.contentType.match(/^text\/html/)) {
        console.log('    (skipped, not text/html).');

        return;
    }

    var url = queueItem.url;

    if (null !== filterByUrls && false === filterByUrls.test(url)) {
        console.log('    (filtered).');

        return;
    }

    if (null !== excludeByUrls && true === excludeByUrls.test(url)) {
        console.log('    (excluded).');

        return;
    }

    if (--maximumUrls < 0) {
        crawler.stop();
        console.log(
            '    (ignored, maximum URLs reached).'
        );

        return;
    }

    urls.push({url: url});
});

crawler.start();
