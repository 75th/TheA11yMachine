#!/usr/bin/env node

'use strict';

/**
 * Copyright (c) 2016, Ivan Enderlin and Liip
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var Tester   = require('./lib/tester');
var async    = require('async');
var chalk    = require('chalk');
var process  = require('process');
var program  = require('commander');
var readline = require('readline');

// Define all the options, with their description and default value.
program
    .usage('[options] url …')
    .option(
        '-c, --filter-by-codes <codes>',
        'Filter results by comma-separated WCAG codes (e.g. `H25,H91,G18`).'
    )
    .option(
        '-C, --exclude-by-codes <codes>',
        'Exclude results by comma-separated WCAG codes (e.g. `H25,H91,G18`).'
    )
    .option(
        '-l, --level <level>',
        'Level of message to fail on (exit code 2): `error` (default), `warning`, `notice`.',
        'error'
    )
    .option(
        '-d, --maximum-depth <depth>',
        'Explore up to a maximum depth (hops).',
        3
    )
    .option(
        '-m, --maximum-urls <maximum_urls>',
        'Maximum number of URLs to compute.',
        128
    )
    .option(
        '-o, --output <output_directory>',
        'Output directory.',
        __dirname + '/a11ym_output'
    )
    .option(
        '-r, --report <report>',
        'Report format: `cli`, `csv`, `html` (default), `json` or `markdown`.',
        'html'
    )
    .option(
        '-s, --standard <standard>',
        'Standard to use: `Section508`, `WCAG2A`, `WCAG2AA` (default), ` WCAG2AAA` or your own (see `--sniffers`).',
        'WCAG2AA'
    )
    .option(
        '-S, --sniffers <sniffers>',
        'Path to the sniffers file, e.g. `resource/sniffers.js` (default).',
        __dirname + '/resource/sniffers.js'
    )
    .option(
        '-u, --filter-by-urls <urls>',
        'Filter URL to test by using a regular expression without delimiters (e.g. \'news|contact\').'
    )
    .option(
        '-U, --exclude-by-urls <urls>',
        'Exclude URL to test by using a regular expression without delimiters (e.g. \'news|contact\').'
    )
    .option(
        '-w, --workers <workers>',
        'Number of workers, i.e. number of URLs computed in parallel.',
        4
    )
    .option(
        '--http-auth-user <http_auth_user>',
        'Username to authenticate all HTTP requests.'
    )
    .option(
        '--http-auth-password <http_auth_password>',
        'Password to authenticate all HTTP requests.'
    )
    .option(
        '--http-tls-disable',
        'Disable TLS/SSL when crawling or downloading pages.'
    )
    .parse(process.argv);

// No URL to compute? Then exit.
if (!program.args[0]) {
    program.help();
    process.exit(1);
}

// Maximum number of URL to compute.
var maximumUrls = +program.maximumUrls;

// When an error occurs, update this flag. It will change the exit code of the
// process.
var hasErrors = false;

// When the test queue has been stopped once, update this flag. It avoids to do
// the “stop computation” more than once.
var isStopped = false;

// Test if some tasks are still running, if none and we have errors, exit with
// a non 0 exit code.
var quit = function() {
    if(0 < testQueue.running()) {
        setTimeout(quit, 500);
    } else if (true === hasErrors) {
        process.exit(2);
    }
};

var killQueue = function(reason) {
    if (false === isStopped) {
        isStopped = true;

        console.log(chalk.white.bgRed('Test queue is stopping. ' + reason));

        if(undefined !== crawler) {
            crawler.stop();
        }

        testQueue.kill();
        console.log(chalk.white.bgRed(testQueue.running() + ' tests still running.'));
    }
};

var tester = Tester(program);

// Queue of URL waiting to be tested (see the `runTest` function). This queue
// has a user-defined concurrency level.
// When a test is executed, it calls the “complete” callback on the task.
// When the maximum number of URL is reached, then we kill this queue, in
// addition to kill all URL queues.
var testQueue = async.queue(
    function (task, onTaskComplete) {
        if (--maximumUrls < 0) {
            killQueue('Maximum URLs reached.');
            onTaskComplete();

            return;
        }

        if (maximumUrls <= 0) {
            var previousOnTaskComplete = onTaskComplete;

            onTaskComplete = function (errors, results) {
                previousOnTaskComplete(errors, results);
                quit();
            };
        }

        console.log(
            chalk.black.bgGreen(' ' + (program.maximumUrls - maximumUrls) + '/' + program.maximumUrls + ' ') +
            ' ' +
            chalk.black.bgGreen('[' + task.queueName + '] Run: ' + task.url + '.')
        );
        tester(
            task.url,
            function (results) {
                task.onUrlComplete();
                onTaskComplete(null, results);
            },
            function (error) {
                hasErrors = true;
                task.onUrlComplete();
                onTaskComplete(error);
            }
        );
    },
    program.workers
);

if ((1 === program.args.length && '-' === program.args[0]) || 1 < program.args.length) {
    maximumUrls = 0;

    var add = function (url) {
        ++maximumUrls;
        testQueue.push({
            url          : url,
            queueName    : 'cli',
            onUrlComplete: function () {}
        });
    };

    if('-' === program.args[0]) {
        readline
            .createInterface(process.stdin, undefined)
            .on('line', add)
            .on('close', function() { program.maximumUrls = maximumUrls; });
    } else {
        program.args.forEach(add);
        program.maximumUrls = maximumUrls;
    }
} else {
    var crawler = require('./lib/crawler');

    crawler.add(program.args[0]);
    crawler.start(program, testQueue);
}

process.on(
    'SIGINT',
    new function () {
        var firstSignal = true;

        return function () {
            killQueue('SIGINT');

            if (false === firstSignal) {
                console.log(chalk.white.bgRed('Yes master!'));

                process.exit(255);
            }

            firstSignal = false;
        }
    }
);
